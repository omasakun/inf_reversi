/*! Used library: normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document ==================== */
/* 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS. */
html {
  line-height: 1.15;
  -webkit-text-size-adjust: 100%;
}

/* Sections ==================== */
/* Remove the margin in all browsers. */
body {
  margin: 0;
}

/* Render the `main` element consistently in IE. */
main {
  display: block;
}

/* Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari. */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content ==================== */
/* 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE. */
hr {
  box-sizing: content-box;
  height: 0;
  overflow: visible;
}

/* 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers. */
pre {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Text-level semantics ==================== */
/* Remove the gray background on active links in IE 10. */
a {
  background-color: transparent;
}

/* 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari. */
abbr[title] {
  border-bottom: none;
  text-decoration: underline;
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

/* Add the correct font weight in Chrome, Edge, and Safari. */
b, strong {
  font-weight: bolder;
}

/* 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers. */
code, kbd, samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Add the correct font size in all browsers. */
small {
  font-size: 80%;
}

/* Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers. */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content ==================== */
/* Remove the border on images inside links in IE 10. */
img {
  border-style: none;
}

/* Forms ==================== */
/* 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari. */
button, input, optgroup, select, textarea {
  font-family: inherit;
  font-size: 100%;
  line-height: 1.15;
  margin: 0;
}

/* Show the overflow in IE.
 * 1. Show the overflow in Edge. */
button, input {
  overflow: visible;
}

/* Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox. */
button, select {
  text-transform: none;
}

/* Correct the inability to style clickable types in iOS and Safari. */
button, [type="button"], [type="reset"], [type="submit"] {
  -webkit-appearance: button;
}

/* Remove the inner border and padding in Firefox. */
button::-moz-focus-inner, [type="button"]::-moz-focus-inner, [type="reset"]::-moz-focus-inner, [type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/* Restore the focus styles unset by the previous rule. */
button:-moz-focusring, [type="button"]:-moz-focusring, [type="reset"]:-moz-focusring, [type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/* Correct the padding in Firefox. */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/* 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers. */
legend {
  box-sizing: border-box;
  color: inherit;
  display: table;
  max-width: 100%;
  padding: 0;
  white-space: normal;
}

/* Add the correct vertical alignment in Chrome, Firefox, and Opera. */
progress {
  vertical-align: baseline;
}

/* Remove the default vertical scrollbar in IE 10+. */
textarea {
  overflow: auto;
}

/* 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10. */
[type="checkbox"], [type="radio"] {
  box-sizing: border-box;
  padding: 0;
}

/* Correct the cursor style of increment and decrement buttons in Chrome. */
[type="number"]::-webkit-inner-spin-button, [type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/* 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari. */
[type="search"] {
  -webkit-appearance: textfield;
  outline-offset: -2px;
}

[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/* Remove the inner padding in Chrome and Safari on macOS. */
/* 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari. */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  font: inherit;
}

/* Interactive ==================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox. */
details {
  display: block;
}

/*
 * Add the correct display in all browsers. */
summary {
  display: list-item;
}

/* Misc ==================== */
/* Add the correct display in IE 10+. */
template {
  display: none;
}

/* Add the correct display in IE 10. */
[hidden] {
  display: none;
}

/*
	Classes defined in this file...
		fullH fullW
		cV cH grow shrink
		scrollX scrollY
		listV listH hide stock
		cSpace cCenter
		center left right framed framed-block */
.fullH {
  height: 100% !important;
}

.fullW {
  width: 100% !important;
}

.cV {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column;
}

.cH {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-direction: row;
      -ms-flex-direction: row;
          flex-direction: row;
}

.cV > *, .cH > * {
  -webkit-flex-shrink: 0;
      -ms-flex-negative: 0;
          flex-shrink: 0;
}

.grow {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
      -ms-flex-positive: 1;
          flex-grow: 1;
}

.shrink {
  -webkit-flex-shrink: 1;
      -ms-flex-negative: 1;
          flex-shrink: 1;
}

.cWrap {
  -webkit-flex-wrap: wrap;
      -ms-flex-wrap: wrap;
          flex-wrap: wrap;
}

.cCenter {
  -webkit-box-pack: center;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center;
}

.cSpace {
  -webkit-justify-content: space-around;
      -ms-flex-pack: distribute;
          justify-content: space-around;
}

.scrollY {
  overflow-y: auto;
}

.scrollX {
  overflow-x: auto;
}

.listV {
  padding-left: 0;
}

.listV > * {
  display: block;
  margin-bottom: 0.2em;
}

.listH {
  padding-left: 0;
  display: inline-block;
  margin: 0;
}

.listH > * {
  display: inline-block;
  margin-right: 1em;
}

.hide {
  display: none;
}

.stack > * {
  position: absolute;
}

.stack > * > * {
  position: relative;
}

.center {
  text-align: center;
}

.left {
  text-align: start;
}

.right {
  text-align: end;
}

.framed-block {
  padding: .5em .5em;
}

.framed {
  padding: 0 .5em;
}

.framed, .framed-block {
  -webkit-transition: all .1s ease-in-out;
  transition: all .1s ease-in-out;
}

.framed *:hover, .framed-block *:hover {
  box-shadow: 0 1px 6px -1px #222;
  box-shadow: initial;
}

/* black&white */
/* purple
	$bg: #a799ef // white background
	$bg2: #524983 // dark background
	$fg: #130f40
	$fg2: #ddd6ff
	$grey: #d9d1ff // hr, input:hover
	$selection: transparentize(#6aaafd, 0.5) */
* {
  -webkit-tap-highlight-color: transparent;
  box-sizing: border-box;
}

*::selection {
  background-color: rgba(184, 181, 208, 0.5);
}

html, body {
  font-family: 'Lato', 'kokoro', 'Noto Sans JP', sans-serif;
  font-weight: 300;
  background-color: #fafafa;
  color: #130f40;
  width: 100%;
  height: 100%;
}

b, strong {
  font-weight: 700;
}

button:not(.seamless) {
  -webkit-transition: 0.1s all;
  transition: 0.1s all;
  display: inline-block;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  outline: none;
  cursor: pointer;
  padding: 0.3em 0.7em;
  margin: 0.2em 0.2em;
  -webkit-user-select: none;
      -ms-user-select: none;
          user-select: none;
  background-color: inherit;
  color: #130f40;
  border-radius: 0px;
  border-color: #130f40;
}

button:not(.seamless):hover {
  background-color: #535353;
  border-color: #535353;
  color: #fafafa;
}

button:not(.seamless):active {
  color: transparent;
}

button.seamless {
  -webkit-transition: 0.1s all;
  transition: 0.1s all;
  display: inline-block;
  border-width: 1px;
  border-style: solid;
  border-radius: 4px;
  outline: none;
  cursor: pointer;
  padding: 0.3em 0.7em;
  margin: 0.2em 0.2em;
  -webkit-user-select: none;
      -ms-user-select: none;
          user-select: none;
  background-color: inherit;
  color: #130f40;
  border-radius: 0px;
  border-color: transparent;
}

button.seamless:hover {
  background-color: #535353;
  border-color: #535353;
  color: #fafafa;
}

button.seamless:active {
  color: transparent;
}

input {
  -webkit-transition: 0.1s all;
  transition: 0.1s all;
  display: inline-block;
  outline: none;
  border: none;
  border-top: 1px solid transparent;
  border-bottom-width: 1px;
  border-bottom-style: solid;
  margin: 0 0.5em;
  padding: 0em 0.7em;
  height: 1.75em;
  color: inherit;
  background-color: inherit;
  border-bottom-color: #130f40;
}

input:hover {
  border-bottom-color: transparent;
}

input:hover {
  background-color: #dadada;
}

input::-webkit-input-placeholder {
  color: rgba(19, 15, 64, 0.6);
}

input:-ms-input-placeholder {
  color: rgba(19, 15, 64, 0.6);
}

input::placeholder {
  color: rgba(19, 15, 64, 0.6);
}

input::selection {
  background-color: rgba(83, 83, 83, 0.9);
  color: #fafafa;
}

hr {
  border: none;
  height: 0;
  border-top-width: 2px;
  border-top-style: dotted;
  margin: 0;
  border-color: #dadada;
  opacity: 0.6;
}

a {
  -webkit-transition: 0.1s all;
  transition: 0.1s all;
  padding: 0 0.7em;
  display: inline-block;
  border-radius: 0.2em;
  text-decoration: none;
  cursor: pointer;
  color: inherit;
}

a::before, a::after {
  content: '';
  display: block;
  width: 100%;
  -webkit-transition: all .1s ease-in-out;
  transition: all .1s ease-in-out;
}

a::before {
  position: relative;
  opacity: 0.4;
  top: 1.2em;
  height: 1px;
}

a::after {
  margin-left: 50%;
  width: 0;
  height: 2px;
}

a:hover::after {
  margin-left: 0;
  width: 100%;
}

a:active::after {
  height: calc(1em + 4px);
  width: calc(100% + 4px);
  margin-left: -2px;
  margin-top: calc(-1em - 2px);
}

a::before, a::after {
  background: #535353;
}

a:active {
  color: #fafafa;
}

h1 a, h2 a, h3 a, h4 a, h5 a, h6 a {
  padding: 0;
}

ul.selectable > li {
  -webkit-transition: all 0.1s;
  transition: all 0.1s;
  cursor: pointer;
  padding: 0.1em 0;
  -webkit-user-select: none;
      -ms-user-select: none;
          user-select: none;
}

ul.selectable > li:hover {
  padding-left: 1em;
}

ul.selectable > li.selected {
  background-color: #535353;
  color: #fafafa;
}

ul.selectable > li:active {
  color: transparent;
}

h1 {
  font-weight: 300;
}

h2 {
  font-size: 1.5em;
  font-weight: 300;
}

h3 {
  font-size: 1.2em;
  font-weight: 300;
  margin-top: 1em;
  margin-bottom: 0.5em;
}

code, kbd, samp, pre {
  font-family: "Inconsolata", monospace;
}

.grid {
  display: grid;
}

.grid.hide {
  display: none;
}

#container {
  padding-top: 2em;
}

#container > div {
  margin: 0 auto 5em;
  padding: 1em;
  box-shadow: 0 12px 60px rgba(10, 10, 10, 0.3);
}

#container > div hr {
  margin: 1em 0em;
}

#container > div hr.full {
  margin: 1em -1em;
  border-top-width: 1px;
  border-top-style: solid;
  opacity: 1;
}

#container input {
  max-width: 10em;
  width: 100%;
}

#container code {
  white-space: pre-wrap;
}

#info, #config, #checker {
  max-width: 30em;
}

input#c-size_in {
  margin: 0 1em 0 0;
  padding-right: 0;
}

#main {
  padding: 1em;
}

#side {
  width: 15em;
  border-left: 2px dotted #dadada;
}

#side-top {
  padding: 0 1em;
}

#side-bottom {
  padding: 1em;
}

#g-canvas_parent {
  position: relative;
  overflow: hidden;
}

#g-canvas {
  position: absolute;
  -ms-touch-action: none;
      touch-action: none;
}
/*# sourceMappingURL=data:application/json;base64, */